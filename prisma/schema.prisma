datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String
  username      String          @unique
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  birthday     DateTime?

  challenges    Challenge[]     @relation("ChallengeCreator")
  attempts      Attempt[]
  reactions     Reaction[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}


model Challenge {
  id          String     @id @default(cuid())
  title       String
  description String?
  slug        String     @unique
  topic       String?
  type        ChallengeType
  createdBy   String
  creator     User       @relation("ChallengeCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  
  questions   Question[]
  attempts    Attempt[]
  reactions   Reaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id          String    @id @default(cuid())
  question    String
  aiGenerated Boolean   @default(false)
  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  
  options     Option[]
  Answer      Answer[]

  @@index([challengeId])
}

model Option {
  id         String   @id @default(cuid())
  option     String
  isCorrect  Boolean
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  Answer     Answer[]
  @@index([questionId])
}

model Attempt {
  id          String    @id @default(cuid())
  userId      String
  challengeId String
  score       Int       @default(0)
  streak      Int       @default(0)
  startedAt   DateTime  @default(now())
  finishedAt  DateTime?

  user        User      @relation(fields: [userId], references: [id])
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  answers     Answer[]

  @@index([userId])
  @@index([challengeId])
}

model Answer {
  id         String   @id @default(cuid())
  attemptId  String
  questionId String
  optionId   String
  isCorrect  Boolean

  attempt    Attempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  option     Option   @relation(fields: [optionId], references: [id], onDelete: Cascade)
}

model Reaction {
  id          String        @id @default(cuid())
  userId      String
  challengeId String
  type        ReactionType
  createdAt   DateTime      @default(now())

  user        User          @relation(fields: [userId], references: [id])
  challenge   Challenge     @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([challengeId])
  @@unique([challengeId, userId])
}

enum ChallengeType {
  AI
  CUSTOM
}

enum ReactionType {
  LIKE
  DISLIKE
  STAR
}